CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(Expedition)

IF (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
	MESSAGE(STATUS "Clang system/compiler detected")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++14")

ELSEIF (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
	MESSAGE(STATUS "G++ system/compiler detected")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")

ELSEIF (${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
	MESSAGE(STATUS "Intel system/compiler detected")

ELSEIF (${CMAKE_CXX_COMPILER_ID} STREQUAL ${MSVC})
	MESSAGE(STATUS "Microsoft system/compiler detected")
	ADD_DEFINITIONS(-DNOMINMAX -DWIN32_LEAN_AND_MEAN -D_CRT_SECURE_NO_DEPRECATE -DEXP_WIN32)

	SET(SFML_ROOT "C:/Libraries/SFML-2.4.2")
	SET(LUA_ROOT "C:/Libraries/Lua5.3")
	SET(SFML_STATIC_LIBRARIES TRUE)

ENDIF()

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
	${CMAKE_SOURCE_DIR}/cmake_modules
)

# Currently always making static LOCAL_LIBS
SET(LIBRARY_EXTENSION "${LIBRARY_EXTENSION}-s")

# Determine what type of library (Debug/Release) to build
IF (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_BUILD_TYPE Debug)
    set(LIBRARY_EXTENSION "${LIBRARY_EXTENSION}-d")

ELSE(NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_BUILD_TYPE Release)

ENDIF()

INCLUDE(${CMAKE_SOURCE_DIR}/ProjectFiles.cmake)

FIND_PACKAGE(SFML 2 REQUIRED graphics window system)
IF(NOT SFML_FOUND)
	MESSAGE( FATAL_ERROR "Could not find SFML 2.X" )
ENDIF()

FIND_PACKAGE(LUA REQUIRED)
IF(NOT LUA_FOUND)
	MESSAGE(FATAL_ERROR "Could not find Lua 5.3")
ENDIF()

INCLUDE_DIRECTORIES(${SFML_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${LUA_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include/)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/thirdparty/)

# Local Libraries
ADD_LIBRARY(Imgui${LIBRARY_EXTENSION} STATIC ${IMGUI_HEADER} ${IMGUI_SOURCE})

SET(LOCAL_LIBS ${LOCAL_LIBS}
	Imgui${LIBRARY_EXTENSION}
)

SET(ALL_LIBS ${ALL_LIBS}
	${LOCAL_LIBS}
	${THIRD_PARTY_LIBS}
	${SFML_LIBRARIES}
	${SFML_DEPENDENCIES}
	${LUA_LIBRARIES}
)

GET_DIRECTORY_PROPERTY( CompileDefinitions DIRECTORY ${CMAKE_SOURCE_DIR} COMPILE_DEFINITIONS )
FOREACH( d ${CompileDefinitions} )
    MESSAGE( STATUS "Definition: " ${d} )
ENDFOREACH()
FOREACH( l ${THIRD_PARTY_LIBS} )
    MESSAGE( STATUS "Third Party Library: " ${l} )
ENDFOREACH()
FOREACH( l ${LOCAL_LIBS} )
    MESSAGE( STATUS "Local Library: " ${l} )
ENDFOREACH()
FOREACH( l ${SFML_DEPENDENCIES} )
    MESSAGE( STATUS "SFML Dependency: " ${l} )
ENDFOREACH()



ADD_EXECUTABLE(Expedition Expedition.cpp)
TARGET_LINK_LIBRARIES(Expedition LINK_PUBLIC ${ALL_LIBS})

ADD_EXECUTABLE(Test test/Test.cpp ${TEST_SOURCE_FILES})
TARGET_LINK_LIBRARIES(Test LINK_PUBLIC ${ALL_LIBS})

FILE(COPY ${CMAKE_SOURCE_DIR}/data DESTINATION ${CMAKE_BINARY_DIR})